import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from sklearn.manifold import TSNE


def visualize_mnist(data_loader, num_rows=2, num_cols=5):
    """Plot random images from the MNIST dataset.

    Args:
        data_loader: Data loader for the MNIST dataset.

    Based on https://medium.com/@mrdatascience/how-to-plot-mnist-digits-using-matplotlib-65a2e0cc068
    """
    sns.set_style('white')
    num_total = num_rows * num_cols
    fig, axes = plt.subplots(num_rows, num_cols, figsize=(1.5 * num_cols, 2 * num_rows))
    for i in range(num_total):
        ax = axes[i // num_cols, i % num_cols]
        idx = np.random.randint(len(data_loader.dataset))
        x = data_loader.dataset[idx][0].view(28, 28).cpu().numpy()
        y = data_loader.dataset[idx][1]
        ax.imshow(x, cmap='gray', vmin=0.0, vmax=1.0)
        ax.set_title(f'Class: {y}')
    plt.tight_layout()
    plt.show()


def visualize_vae_samples(samples, num_rows=2, num_cols=5):
    """Plot random samples generated by the VAE.

    Args:
        samples: Samples drawn from the model, shape [num_samples, 28, 28]

    """
    sns.set_style('white')
    num_total = num_rows * num_cols
    fig, axes = plt.subplots(num_rows, num_cols, figsize=(1.5 * num_cols, 2 * num_rows))
    for i in range(num_total):
        ax = axes[i // num_cols, i % num_cols]
        ax.imshow(samples[i], cmap='gray', vmin=0.0, vmax=1.0)
        ax.set_title(f'Sample #{i}')
    plt.tight_layout()
    plt.show()


def visualize_embeddings(vae, x, y):
    sns.set_style('whitegrid')
    tsne = TSNE(init='pca')
    # Obtain embeddings using VAE
    means = vae.encoder(x)[0].cpu().detach().numpy()
    # Dimensionality reduction on the embeddings using t-SNE
    emb = tsne.fit_transform(means)

    plt.figure(figsize=[10, 7])
    labels = y.cpu().numpy()
    for l in np.unique(labels):
        class_ind = (labels == l)
        plt.scatter(emb[class_ind, 0], emb[class_ind, 1], label=f'{l}', alpha=0.5)
        plt.legend()
    plt.xlabel('t-SNE component 1')
    plt.ylabel('t-SNE component 2')
    plt.show()
